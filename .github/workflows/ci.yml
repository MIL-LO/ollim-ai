name: 🐍 Python 기능 테스트 CI

on:
  pull_request:
    branches: [ main, dev ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: 📦 소스코드 체크아웃
        uses: actions/checkout@v3

      - name: 🔐 .env 파일 생성
        run: |
          echo "${{ secrets.ENV }}" | base64 -d > .env

      - name: 🐍 Python 3.10 환경 설정
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: 🔧 패키지 설치
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install sentence-transformers==2.2.2
          pip install transformers==4.30.2
          pip install huggingface_hub==0.16.4

      - name: 🐳 docker compose로 Milvus 등 서비스 실행
        run: |
          echo "docker 디렉토리로 이동 후 docker compose 실행"
          cd docker
          docker compose up -d
          cd ..

      - name: ⏳ Milvus gRPC 포트가 열릴 때까지 대기
        run: |
          echo "Milvus 서비스가 시작될 때까지 대기 중..."
          timeout 90 bash -c 'until echo > /dev/tcp/localhost/19530; do sleep 2; done'
          echo "Milvus가 시작되었습니다."
      
      - name: 📂 컬렉션 존재 여부 확인 및 생성
        run: |
          echo "Milvus에 컬렉션을 생성합니다..."
          PYTHONPATH=. python app/db/milvus_schema.py
      
      - name: 📂 데이터베이스에 데이터 삽입
        run: |
          echo "Milvus에 데이터를 삽입합니다..."
          PYTHONPATH=. python app/db/milvus_insert.py
          echo "데이터 삽입 완료"

      - name: ✅ 기능 테스트 실행
        env:
          SPOTIPY_CLIENT_ID: ${{ secrets.SPOTIPY_CLIENT_ID }}
          SPOTIPY_CLIENT_SECRET: ${{ secrets.SPOTIPY_CLIENT_SECRET }}
          TOKENIZERS_PARALLELISM: false
        run: |
          echo "기능 테스트를 실행합니다..."
          PYTHONPATH=. python -m unittest discover -s tests -p 'test_*.py'

      - name: 🧹 docker compose 종료
        if: always()
        run: |
          echo "docker 서비스 종료 및 정리"
          cd docker
          docker compose down